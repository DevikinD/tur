From 32f3d05fbc5ee8daa708d338738e9afc4090b288 Mon Sep 17 00:00:00 2001
From: Billy Laws <blaws05@gmail.com>
Date: Tue, 10 Dec 2024 19:55:12 +0000
Subject: [PATCH 14/14] ntdll: Emulate mrs xN, CurrentEL instructions.

These trap on linux but under Windows userspace will write 0
to the destination register. Fixes running recent versions of
VC redist.
---
 dlls/ntdll/tests/exception.c   | 19 +++++++++++++++++++
 dlls/ntdll/unix/signal_arm64.c | 13 +++++++++++++
 dlls/winecrt0/arm64ec.c        | 11 +++++++----
 3 files changed, 39 insertions(+), 4 deletions(-)

diff --git a/dlls/ntdll/tests/exception.c b/dlls/ntdll/tests/exception.c
index 4a89cf6a5dc..73ab39474c4 100644
--- a/dlls/ntdll/tests/exception.c
+++ b/dlls/ntdll/tests/exception.c
@@ -8296,6 +8296,24 @@ static void test_restore_context(void)
         ok(0, "unexpected pass %ld\n", pass);
 }
 
+static void test_mrs_currentel(void)
+{
+    DWORD64 (*func_ptr)(void) = code_mem;
+    DWORD64 result;
+
+    static const DWORD call_func[] =
+    {
+        0xd5384240, /* mrs x0, CurrentEL */
+        0xd65f03c0, /* ret */
+    };
+
+    memcpy( func_ptr, call_func, sizeof(call_func) );
+    FlushInstructionCache( GetCurrentProcess(), func_ptr, sizeof(call_func) );
+    result = func_ptr();
+    ok( result == 0, "expected 0, got %llx\n", result );
+}
+
+
 #endif  /* __aarch64__ */
 
 #if defined(__i386__) || defined(__x86_64__)
@@ -12024,6 +12042,7 @@ START_TEST(exception)
     test_nested_exception();
     test_collided_unwind();
     test_restore_context();
+    test_mrs_currentel();
 
 #elif defined(__arm__)
 
diff --git a/dlls/winecrt0/arm64ec.c b/dlls/winecrt0/arm64ec.c
index a3af06b380d..65b8df4de24 100644
--- a/dlls/winecrt0/arm64ec.c
+++ b/dlls/winecrt0/arm64ec.c
@@ -31,6 +31,9 @@ void *__os_arm64x_dispatch_ret = 0;
 void *__os_arm64x_get_x64_information = 0;
 void *__os_arm64x_set_x64_information = 0;
 
+void *__os_arm64x_helper0 = 0;
+void *__os_arm64x_helper1 = 0;
+void *__os_arm64x_helper2 = 0;
 void *__os_arm64x_helper3 = 0;
 void *__os_arm64x_helper4 = 0;
 void *__os_arm64x_helper5 = 0;
@@ -73,7 +76,7 @@ asm( "\t.section .rdata,\"dr\"\n"
      "\t.globl __chpe_metadata\n"
      "\t.balign 4\n"
      "__chpe_metadata:\n"
-     "\t.word 2\n"
+     "\t.word 1\n"
      "\t.rva __hybrid_code_map\n"
      "\t.word __hybrid_code_map_count\n"
      "\t.rva __x64_code_ranges_to_entry_points\n"
@@ -93,9 +96,9 @@ asm( "\t.section .rdata,\"dr\"\n"
      "\t.word __arm64x_extra_rfe_table_size\n"
      "\t.rva __os_arm64x_dispatch_fptr\n"
      "\t.rva __hybrid_auxiliary_iat_copy\n"
-     "\t.rva __hybrid_auxiliary_delayload_iat\n"
-     "\t.rva __hybrid_auxiliary_delayload_iat_copy\n"
-     "\t.word __hybrid_image_info_bitfield\n"
+     "\t.rva __os_arm64x_helper0\n"
+     "\t.rva __os_arm64x_helper1\n"
+     "\t.rva __os_arm64x_helper2\n"
      "\t.rva __os_arm64x_helper3\n"
      "\t.rva __os_arm64x_helper4\n"
      "\t.rva __os_arm64x_helper5\n"
-- 
2.48.1

